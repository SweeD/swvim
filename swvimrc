set shell=/bin/sh
set nocompatible

" Bundles for the vim plugins
" Bundle: git://git.wincent.com/command-t.git
" BundleCommand: cd ~/.vim/bundle/command-t && rake make
" Bundle: git://github.com/tpope/vim-rails.git
" Bundle: git://github.com/vim-ruby/vim-ruby.git
" Bundle: git://github.com/altercation/vim-colors-solarized.git
" Bundle: git://github.com/tpope/vim-git.git
" Bundle: git://github.com/tpope/vim-fugitive.git
" Bundle: git://github.com/tpope/vim-commentary.git
" Bundle: git://github.com/wycats/nerdtree.git
" Bundle: git://github.com/pangloss/vim-javascript.git
" Bundle: git://github.com/msanders/snipmate.vim.git
" Bundle: git://github.com/kchmck/vim-coffee-script.git
" Bundle: git://github.com/nono/vim-handlebars.git
" Bundle: git://github.com/ervandew/supertab.git
" Bundle: git://github.com/groenewege/vim-less.git
" Bundle: git://github.com/hallettj/jslint.vim.git
" BundleCommand: cd ~/.vim/bundle/jslint.vim && rake install
" Bundle: git://github.com/tpope/vim-surround.git

" Setup the bundles
runtime bundle/vim-pathogen/autoload/pathogen.vim
" Bundle: tpope/vim-pathogen
call pathogen#infect()

" Set solarized-colors
set t_Co=256
let g:solarized_termcolors=256
syntax enable
set background=light
colorscheme solarized

" Leader setting
let mapleader = ","

set number
set ruler

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/plugins/*,temp_gems/*,

" Status bar
set laststatus=2

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

" Command-T configuration
let g:CommandTMaxHeight=20

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Hammer<CR>
endfunction

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

au BufRead,BufNewFile *.txt call s:setupWrapping()

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" Use modeline overrides
set modeline
set modelines=10

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Show (partial) command in the status line
set showcmd

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Add the currents files directory in command with %%
cnoremap %% <C-R>=expand('%:h').'/'<cr>

set winwidth=84

" Make the current window big, but leave others context
set winwidth=84

" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will fail.
set winheight=5
set winminheight=5
set winheight=999

" Jumping between windows
map <C-H> <C-W><C-H>
map <C-L> <C-W><C-L>
map <C-J> <C-W><C-J>
map <C-K> <C-W><C-K>

" Vertical split right and split below
set splitright
set splitbelow

" Open files with <leader>f
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>

" Open files, limited to the directory of the current file, with <leader>gf
" This requires the %% mapping found below.
map <leader>gf :CommandTFlush<cr>\|:CommandT %%<cr>

" Open files limited to a specific rails-path
map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>gp :CommandTFlush<cr>\|:CommandT public<cr>
map <leader>gs :CommandTFlush<cr>\|:CommandT spec<cr>

" Starts the current spec
map <leader>r :!rspec %<cr>

" Commentary
map <leader>c \\

" NERDTree - toggle
map <leader>n :NERDTreeToggle<cr>

" Open the current buffer in the NERDTree
map <C-N> :NERDTreeFind<cr>

" ctags tags file generation for the current directory
map <F8> :!ctags -R .<CR>

function ToggleBackground ()
  if &background == 'light'
    colorscheme solarized
    set background=dark
  else
    colorscheme solarized
    set background=light
  endif
endfunction

map <leader>z :call ToggleBackground()<cr>

" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
